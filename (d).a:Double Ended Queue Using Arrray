#include<stdio.h>
#include<stdlib.h>
struct queue
{
    int size;
    int front;
    int rear;
    int * Q;
};
void create(struct queue * q, int size);
void enqueueRear(struct queue * q, int x);
void enqueueFront(struct queue * q, int x);
int dequeueFront(struct queue * q);
int dequeRear(struct queue * q);
void display(struct queue q);
int main()
{
    struct queue q;

    create(&q,5);

    enqueueRear(&q,10);
    enqueueRear(&q,20);
    enqueueRear(&q,30);
    enqueueRear(&q,40);
    enqueueRear(&q,50);

    display(q);

    printf("\n%d\t",dequeueFront(&q));
    printf("%d\n\n",dequeueFront(&q));

    enqueueFront(&q,60);
    enqueueFront(&q,70);
    enqueueFront(&q,80);

    display(q);

    printf("\n%d\t",dequeRear(&q));
    printf("%d\n\n",dequeRear(&q));

    display(q);

    return 0;
}

void create(struct queue * q, int size)
{
    q->size = size;
    q->front = q->rear = -1;
    q->Q = (int *)malloc(q->size*sizeof(int));
}

void enqueueRear(struct queue * q, int x)
{
    if(q->rear == q->size-1)
    {
        printf("queue is full");
    }
    else if(q->front == -1 && q->rear == -1)
    {
        q->front++;
        q->rear++;
        q->Q[q->front] = x;
    }
    else
    {
        q->rear++;
        q->Q[q->rear] = x;
    }
}

void enqueueFront(struct queue * q, int x)
{
    if(q->front == -1 && q->rear == -1)
    {
        q->front++;
        q->rear++;
        q->Q[q->front] = x;
    }
    else if(q->front - 1 != -1)
    {
        q->front--;
        q->Q[q->front] = x;
    }
    else
    {
        printf("no space to enter elements\n");
    }
}

int dequeueFront(struct queue * q)
{
    int x=-1;

    if(q->front == q->rear)
    {
        printf("queue is empty");
    }
    else
    {
        q->front++;
        x = q->Q[q->front];
    }
    return(x);
}

int dequeRear(struct queue * q)
{
    int x=-1;

    if(q->front == q->rear)
    {
        printf("queue is empty");
    }
    else
    {
        x = q->Q[q->rear];
        q->rear--;
    }
    return(x);
}

void display(struct queue q)
{
    int i;

    for(i=q.front; i<=q.rear; i++)
    {
        printf("%d\t",q.Q[i]);
    }
    printf("\n");
}






